generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://shrisanjaykumarselvakumar:@localhost:5432/mydatabase"
}

model User {
  id              String         @id @unique @default(uuid())
  email           String         @unique
  password        String
  deviceToken     String?
  name            String?
  dob             DateTime?      @db.Date
  location        String?
  companyID       BigInt?
  companyRole     String?
  transferPin     Int?
  image           String?
  resetPassword   String?
  resetPasswordAt DateTime?
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt
  Company         Company?       @relation(fields: [companyID], references: [id])
  refreshTokens   RefreshToken[]
  Wallet          Wallet?
  SavingGoals     SavingGoal[]
  Transactions    Transaction[]
  Notifications   Notification[]
}

model Company {
  id        BigInt   @id @unique @default(autoincrement())
  name      String
  size      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User[]
}

model Wallet {
  id        String   @id @unique
  balance   Float    @default(0)
  budget    Float    @default(0)
  rounding  Float    @default(0)
  userID    String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User?    @relation(fields: [userID], references: [id], onDelete: Cascade)
}

model SavingGoal {
  id         BigInt   @id @unique @default(autoincrement())
  title      String
  progress   Float    @default(0)
  goal       Int      @db.Integer
  percentage Int      @default(0) @db.SmallInt
  userID     String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  priority   Int
  User       User     @relation(fields: [userID], references: [id])
}

model Transaction {
  id        BigInt   @id @unique @default(autoincrement())
  amount    Float
  method    String
  type      String
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userID], references: [id])
}

model Deal {
  id            BigInt      @id @unique @default(autoincrement())
  title         String
  description   String      @db.Text
  startDate     DateTime    @db.Date
  endDate       DateTime    @db.Date
  days          String[]
  reach         String
  target        String
  category      String
  redemption    Redemption
  clickURL      String?
  trigger       Trigger
  triggerAmount Float
  triggerLimit  Int
  triggerType   TriggerType
  triggerReward Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
}

model Notification {
  id        BigInt   @id @unique @default(autoincrement())
  title     String
  content   String
  dismissed Boolean  @default(false)
  userID    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  User      User     @relation(fields: [userID], references: [id])
}

model RefreshToken {
  id          String   @id @unique @default(uuid())
  hashedToken String
  userID      String
  revoked     Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  User        User     @relation(fields: [userID], references: [id], onDelete: Cascade)
}

enum Redemption {
  CARD
  CLICK
}

enum Trigger {
  MIN_PURCHASE
  CUMUL_PURCHASE
  PURCHASE_FREQ
}

enum TriggerType {
  CASH
  PERCENTAGE
}
